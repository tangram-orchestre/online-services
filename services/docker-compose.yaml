services:
  # Backend service running Poem OpenAPI.
  backend:
    build:
      context: ./backend/dev
      args:
        - UID=${UID-1000}
        - GID=${UID-1000}
    volumes:
      - ./scripts:/opt/scripts:ro
      - ./backend:/opt/backend
      - ./openapi:/opt/openapi # dev.sh will write spec.json here.

      # Use anonymous volumes to cache data on container config change.
      - backend_cargo_target_dir:/opt/cargo_target_dir
      - backend_cargo_registry:/opt/cargo_home/registry

    user: ${UID-1000}:${GID-1000}

    working_dir: /opt/backend
    environment:
      - APP_HOST=localhost
      - APP_CORS_ORIGINS=https://localhost,https://api.localhost,https://portal.localhost
      - APP_ALTCHA_SECRET=super-secret
      - APP_SMTP_HOST=maildev
      - APP_OTLP_ENDPOINT=http://lgtm:4318/v1/logs
      - APP_OTLP_SERVICE_NAME=backend
    command: watchexec --restart -- ./dev/dev.sh
    labels:
      - traefik.enable=true
      - "traefik.http.routers.backend.rule=(Host(`localhost`) && PathPrefix(`/api`)) || (Host(`portal.localhost`) && PathPrefix(`/api`)) || Host(`api.localhost`)"
      - traefik.http.services.backend.loadbalancer.server.port=3000
      - traefik.http.routers.backend.tls=true
      - "traefik.http.middlewares.backend-stripprefix.stripprefix.prefixes=/api"
      - traefik.http.routers.backend.middlewares=backend-stripprefix,fake-auth@file

  showcase-website:
    build:
      context: ./showcase-website/dev
      args:
        - UID=${UID-1000}
        - GID=${UID-1000}
    volumes:
      - ./scripts:/opt/scripts:ro
      - ./showcase-website:/opt/showcase-website
      - ./openapi:/opt/openapi # dev.sh will write spec.json here.
    user: ${UID-1000}:${GID-1000}
    working_dir: /opt/showcase-website
    entrypoint:
    command: yarn run dev2
    environment:
      - PRIVATE_API_BASE_URL=http://backend:3000
      - PUBLIC_API_BASE_URL=https://localhost/api
      - FORCE_COLOR=1
    tmpfs:
      - /tmp
    labels:
      - traefik.enable=true
      - traefik.http.routers.showcase-website.rule=Host(`localhost`)
      - traefik.http.services.showcase-website.loadbalancer.server.port=3000
      - traefik.http.routers.showcase-website.tls=true

  portal:
    build:
      context: ./portal/dev
      args:
        - UID=${UID-1000}
        - GID=${UID-1000}
    volumes:
      - ./scripts:/opt/scripts:ro
      - ./portal:/opt/portal
      - ./openapi:/opt/openapi # dev.sh will write spec.json here.
    user: ${UID-1000}:${GID-1000}
    working_dir: /opt/portal
    command: yarn run dev2
    environment:
      - FORCE_COLOR=1
    tmpfs:
      - /tmp
    labels:
      - traefik.enable=true
      - traefik.http.routers.portal.rule=Host(`portal.localhost`)
      - traefik.http.services.portal.loadbalancer.server.port=3000
      - traefik.http.routers.portal.tls=true

  traefik:
    image: traefik:v3.0
    stop_signal: SIGKILL
    ports:
      # The HTTP port
      - "80:80"
      # The HTTPS port
      - "443:443"
    volumes:
      # So that Traefik can listen to the Docker events
      - /var/run/docker.sock:/var/run/docker.sock
      - ./dev/traefik/traefik.yml:/etc/traefik/traefik.yml
      - ./dev/traefik/dynamic-conf:/etc/traefik/dynamic-conf
      - ./dev/traefik/certs:/etc/traefik/certs
    labels:
      - traefik.enable=true
      - traefik.http.routers.dashboard.rule=Host(`traefik.localhost`)
      - traefik.http.routers.dashboard.service=api@internal
      - traefik.http.routers.dashboard.tls=true

  fake-auth:
    image: node:22-alpine
    volumes:
      - ./dev/fake-auth/:/app
    working_dir: /app
    stop_signal: SIGKILL
    command: node --watch index.js

  maildev:
    image: maildev/maildev:2.2.1
    labels:
      - traefik.enable=true
      - traefik.http.routers.maildev.rule=Host(`maildev.localhost`)
      - traefik.http.services.maildev.loadbalancer.server.port=1080
      - traefik.http.routers.maildev.tls=true

  lgtm:
    image: grafana/otel-lgtm:0.11.5
    labels:
      - traefik.enable=true
      - traefik.http.routers.grafana.rule=Host(`grafana.localhost`)
      - traefik.http.services.grafana.loadbalancer.server.port=3000
      - traefik.http.routers.grafana.tls=true

volumes:
  backend_cargo_target_dir:
  backend_cargo_registry:
